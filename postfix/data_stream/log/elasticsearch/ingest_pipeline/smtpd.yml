---
# TODO: Need to add additional event category and type processing to this pipeline.  There's a lot going on here. :)
# TODO: Implement email.direction
description: |
    Pipeline for processing Posftix smtpd events.  The smtp daemon accepts network connection 
    requests and performs SMTP transactions per connection
processors:
    - append:
        description: Append pipeline trace tag if enabled
        field: tags
        value:
            - "pipeline: smtpd"
        if: ctx.tags != null && ctx.tags.contains('pipeline_trace_enabled')
    - grok:
        # TODO: The disconnect and command parsing pattern in this processor should be revisited in a future release.  
        #       It doesn't gracefully handle multiple "missing_parser" commands in a disconnect message
        field: message
        patterns:
            - '(?<_tmp.smtpd_cxn_action>connect) from %{HOSTNAME:client.domain}\[%{IP:client.address}\]$'
            - '(?<_tmp.smtpd_cxn_action>disconnect) from %{HOSTNAME:client.domain}\[%{IP:client.address}\] (%{AUTH}|%{BDAT}|%{COMMANDS}|%{DATA}|%{EHLO}|%{HELO}|%{ETRN}|%{EXPN}|%{HELP}|%{MAIL}|%{NOOP}|%{QUIT}|%{RCPT}|%{RSET}|%{STARTTLS}|%{UNKNOWN}|%{VRFY}|%{MISSING_PARSER}|%{SPACE})+'
            - '(?<_tmp.smtpd_cxn_action>disconnect) from %{HOSTNAME:client.domain}\[%{IP:client.address}\]'
            - '%{TLS_AUTH_TYPE:postfix.smtpd.connection.tls.client_certificate_status} (?<_tmp.tls_connection>TLS connection established) from %{HOSTNAME:client.domain}\[%{IP:client.address}\]: TLSv(?<tls.version>[\d\.]+) with cipher %{WORD:tls.cipher} \(%{NUMBER}\/%{NUMBER} bits\) key-exchange (?<postfix.smtpd.connection.tls.key_exchange_algorithm>[\w]+) server-signature (?<postfix.smtpd.connection.tls.server.signature_algorithm>[\w-]+) \(%{POSINT:postfix.smtpd.connection.tls.server.signature_strength:long} bits\) server-digest %{WORD:postfix.smtpd.connection.tls.server.signature_digest}$'
            - '%{LOSTCONN:postfix.smtpd.connection.lost.message}( after %{SMTP_STAGE:postfix.smtpd.connection.lost.stage}( \(%{INT} bytes\))?)? from %{HOSTNAME:client.domain}\[%{IP:client.address}\](: %{GREEDYDATA:postfix.smtpd.connection.lost.reason})?'
            - '(?<email.local_id>[0-9A-F]+|NOQUEUE): client=%{HOSTNAME:client.domain}\[%{IP:client.address}\]'
            - '(?<postfix.error.code>improper command pipelining) after %{SMTP_STAGE} from %{HOSTNAME:client.domain}\[%{IP:client.address}\]: %{GREEDYDATA}'
            - '(?<postfix.error.type>warning): %{HOSTNAME}: (?<postfix.error.code>RBL lookup error): %{GREEDYDATA:_tmp.rbl_error_msg}'
            - '(?<postfix.error.type>warning): (?<postfix.error.code>TLS library problem): %{GREEDYDATA}'
            - '(?<postfix.error.type>warning): hostname %{HOSTNAME:client.domain} (?<postfix.error.code>does not resolve to address) %{IP:client.address}'
            - '(?<postfix.error.type>warning): (?<postfix.error.code>non-SMTP command) from %{HOSTNAME:client.domain}\[%{IP:client.address}\]: %{GREEDYDATA}'
            - '%{GREEDYDATA:_tmp.catch_all}'
        pattern_definitions:
            # Command definitions
            AUTH: 'auth=(%{INT:postfix.smtpd.connection.commands.auth.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.auth.total_count:long}|%{INT:postfix.smtpd.connection.commands.auth.total_count:long})'
            BDAT: 'bdat=(%{INT:postfix.smtpd.connection.commands.bdat.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.bdat.total_count:long}|%{INT:postfix.smtpd.connection.commands.bdat.total_count:long})'
            COMMANDS: 'commands=(%{INT:postfix.smtpd.connection.commands.total_accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.total_count:long}|%{INT:postfix.smtpd.connection.commands.total_count:long})'
            DATA: 'data=(%{INT:postfix.smtpd.connection.commands.data.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.data.total_count:long}|%{INT:postfix.smtpd.connection.commands.data.total_count:long})'
            EHLO: 'ehlo=(%{INT:postfix.smtpd.connection.commands.ehlo.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.ehlo.total_count:long}|%{INT:postfix.smtpd.connection.commands.ehlo.total_count:long})'
            ETRN: 'etrn=(%{INT:postfix.smtpd.connection.commands.etrn.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.etrn.total_count:long}|%{INT:postfix.smtpd.connection.commands.etrn.total_count:long})'
            EXPN: 'expn=(%{INT:postfix.smtpd.connection.commands.expn.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.expn.total_count:long}|%{INT:postfix.smtpd.connection.commands.expn.total_count:long})'
            HELO: 'helo=(%{INT:postfix.smtpd.connection.commands.helo.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.helo.total_count:long}|%{INT:postfix.smtpd.connection.commands.helo.total_count:long})'
            HELP: 'help=(%{INT:postfix.smtpd.connection.commands.help.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.help.total_count:long}|%{INT:postfix.smtpd.connection.commands.help.total_count:long})'
            MAIL: 'mail=(%{INT:postfix.smtpd.connection.commands.mail.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.mail.total_count:long}|%{INT:postfix.smtpd.connection.commands.mail.total_count:long})'
            NOOP: 'noop=(%{INT:postfix.smtpd.connection.commands.noop.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.noop.total_count:long}|%{INT:postfix.smtpd.connection.commands.noop.total_count:long})'
            QUIT: 'quit=(%{INT:postfix.smtpd.connection.commands.quit.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.quit.total_count:long}|%{INT:postfix.smtpd.connection.commands.quit.total_count:long})'
            RCPT: 'rcpt=(%{INT:postfix.smtpd.connection.commands.rcpt.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.rcpt.total_count:long}|%{INT:postfix.smtpd.connection.commands.rcpt.total_count:long})'
            RSET: 'rset=(%{INT:postfix.smtpd.connection.commands.rset.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.rset.total_count:long}|%{INT:postfix.smtpd.connection.commands.rset.total_count:long})'
            STARTTLS: 'starttls=(%{INT:postfix.smtpd.connection.commands.starttls.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.starttls.total_count:long}|%{INT:postfix.smtpd.connection.commands.starttls.total_count:long})'
            UNKNOWN: 'unknown=(%{INT:postfix.smtpd.connection.commands.unknown.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.unknown.total_count:long}|%{INT:postfix.smtpd.connection.commands.unknown.total_count:long})'
            VRFY: 'vrfy=(%{INT:postfix.smtpd.connection.commands.vrfy.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.vrfy.total_count:long}|%{INT:postfix.smtpd.connection.commands.vrfy.total_count:long})'
            MISSING_PARSER: '%{WORD:postfix.smtpd.connection.commands.missing_parser.command_name}=(%{INT}\/%{INT}|%{INT})'
            # General patterns
            SMTP_STAGE: '(CONNECT|HELO|EHLO|STARTTLS|AUTH|MAIL( FROM)?|RCPT( TO)?|(end of )?DATA|BDAT|RSET|UNKNOWN|END-OF-MESSAGE|VRFY|\.)'
            TLS_AUTH_TYPE: '(Anonymous|Trusted|Untrusted|Verified)'
            # Lost connection patterns
            LOSTCONN: '(Connection timed out|No route to host|Connection refused|Network is unreachable|lost connection|timeout|SSL_accept error|-1)'
            LOSTCONN_REASONS: '(receiving the initial server greeting|sending message body|sending end of data -- message may be sent more than once)'
        description: 'Extracts smtpd event fields.'
    - grok:
        field: _tmp.rbl_error_msg
        patterns:
            - '%{DATA} name=%{HOSTNAME:dns.question.name} type=%{WORD:dns.question.type}: %{GREEDYDATA}'
        description: |
            Extract dns.question fields from RBL lookup errors
        if: "ctx._tmp?.rbl_error_msg != null && ctx._tmp?.rbl_error_msg == 'RBL lookup error'"
    - set:
        description: Set tls.established to true for successful TLS connections
        field: tls.established
        override: false
        ignore_empty_value: false
        value: true
        if: 'ctx._tmp?.tls_connection != null'
    - set:
        description: Set tls.version_protocol to tls for successful TLS connections
        field: tls.version_protocol
        override: false
        ignore_empty_value: false
        value: 'tls'
        if: 'ctx.tls?.version != null'
    - set:
        description: If this is an smtpd connect event, set the event.action to smtpd-connect
        field: event.action
        ignore_empty_value: false
        value: "smtpd-connect"
        if: 'ctx._tmp?.smtpd_cxn_action == "connect"'
    - set:
        description: If this is an smtpd disconnect event, set the event.action to smtpd-disconnect
        field: event.action
        ignore_empty_value: false
        value: "smtpd-disconnect"
        if: 'ctx._tmp?.smtpd_cxn_action == "disconnect"'
    - set:
        description: If this is an RBL error message and a DNS query was captured, set the dns.type
        field: dns.type
        override: false
        ignore_empty_value: false
        value: question
        if: 'ctx.dns?.question?.name != null'
    - script:
        description: 'Calculate connection command metrics'
        source: |
            def cmds = ctx.postfix.smtpd.connection.commands;
            def cmdKeys = params.cmdKeys;
            for (key in cmds.keySet()) {
                if (cmdKeys.contains(key)) {
                    long rejected = 0;
                    long accepted = 0;
                    long total_count = 0;
                    if (cmds[key].containsKey('total_count')) {
                        total_count = cmds[key].total_count;
                    }
                    if (cmds[key].containsKey('accepted_count')) {
                        accepted = cmds[key].accepted_count;
                    } else {
                        accepted = total_count
                    }
                    if (cmds[key].containsKey('rejected_count')) {
                        rejected = cmds[key].rejected_count;
                    }
                    cmds[key].total_count = total_count;
                    cmds[key].accepted_count = accepted;
                    cmds[key].rejected_count = total_count - accepted;
                }
            }
            if (cmds.containsKey('total_count') && cmds.containsKey('total_accepted_count')) {
                cmds.total_rejected_count = cmds.total_count - cmds.total_accepted_count;
            }
            ctx.postfix.smtpd.connection.commands = cmds;
        params:
            cmdKeys:
                - auth
                - bdat
                - data
                - ehlo
                - etrn
                - expn
                - helo
                - help
                - noop
                - quit
                - rcpt
                - rset
                - starttls
                - unknown
                - vrfy
        if: "ctx.tags != null && ctx.tags.contains('connection_metrics_enabled') && ctx.postfix?.smtpd?.connection?.commands != null"
    - append:
        description: "Append warning to postfix.error.type if the event is an improprer command pipelining event"
        field: postfix.error.type
        value:
            - warning
        allow_duplicates: false
        if: 'ctx.postfix?.error?.code == "improper command pipelining"'
    - append:
        description: "Append the contents of the message field to postfix.error.message if postfix.error.type is warning or fatal."
        field: postfix.error.message
        value:
            - "{{{message}}}"
        allow_duplicates: false
        if: "ctx.postfix?.error?.type != null && (ctx.postfix?.error?.type == 'warning' || ctx.postfix?.error?.type == 'fatal')"
    # -------------------------------------------------------------------------------------
    #  Error messsage and code handling for missing command parser in disconnect events 
    #  with a command summary
    # -------------------------------------------------------------------------------------
    - append:
        description: "Append an error message containing information about a missing command parser, if any, for disconnect messages."
        field: postfix.error.message
        value:
            - "Missing SMTPD disconnect command summary grok pattern for command [{{{postfix.smtpd.connection.commands.missing_parser.command_name}}}]"
        if: "ctx.postfix?.smtpd?.connection?.commands?.missing_parser?.command_name != null"
    - append:
        description: "Append an error code for missing command parser."
        field: postfix.error.code
        value:
            - "grok parsing failure"
        if: "ctx.postfix?.smtpd?.connection?.commands?.missing_parser?.command_name != null"
    - append:
        description: "Append warning to postfix.error.type for missing command parser."
        field: postfix.error.type
        value:
            - warning
        allow_duplicates: false
        if: 'ctx.postfix?.error?.code == "improper command pipelining"'
    # ---End Section---
    - append:
        description: "Append unknown to postfix.error.code if there is a postfix.error.message on the event and postfix.error.code wasn't specifically parsed by the grok processor."
        field: postfix.error.code
        value:
            - 'unknown'
        allow_duplicates: false
        if: 'ctx.postfix?.error?.message != null && ctx.postfix?.error?.code == null'
    - append:
        # Set to info because even.type: error is not supported for event.category: email.
        description: 'Append info to event.type'
        field: 'event.type'
        value: 
            - 'info'
        allow_duplicates: false
    - set:
        description: 'Set info to log.level if a postfix.error.code is not populated'
        field: log.level
        value: 
            - 'info'
        if: 'ctx.postfix?.error?.code == null'