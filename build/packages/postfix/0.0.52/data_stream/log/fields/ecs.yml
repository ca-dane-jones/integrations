- description: |-
    Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: client.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: client.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: client.as.organization.name
  type: keyword
- description: |-
    The domain name of the client system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: client.domain
  type: keyword
- description: City name.
  name: client.geo.city_name
  type: keyword
- description: Two-letter code representing continent's name.
  name: client.geo.continent_code
  type: keyword
- description: Name of the continent.
  name: client.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: client.geo.country_iso_code
  type: keyword
- description: Country name.
  name: client.geo.country_name
  type: keyword
- description: Longitude and latitude.
  name: client.geo.location
  type: geo_point
- description: Region ISO code.
  name: client.geo.region_iso_code
  type: keyword
- description: Region name.
  name: client.geo.region_name
  type: keyword
- description: IP address of the client (IPv4 or IPv6).
  name: client.ip
  type: ip
- description: |-
    The highest registered client domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: client.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: client.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: client.top_level_domain
  type: keyword
- description: |-
    The name being queried.
    If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.
  name: dns.question.name
  type: keyword
- description: The type of record being queried.
  name: dns.question.type
  type: keyword
- description: |-
    The type of DNS event captured, query or answer.
    If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query`.
    If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.
  name: dns.type
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: The direction of the message based on the sending and receiving domains.
  name: email.direction
  type: keyword
- description: The email address of the sender, typically from the RFC 5322 `From:` header field.
  name: email.from.address
  type: keyword
- description: |-
    Unique identifier given to the email by the source that created the event.
    Identifier is not persistent across hops.
  name: email.local_id
  type: keyword
- description: Identifier from the RFC 5322 `Message-ID:` email header that refers to a particular email message.
  name: email.message_id
  type: wildcard
- description: The email address of recipient
  name: email.to.address
  type: keyword
- description: Error code describing the error.
  name: error.code
  type: keyword
- description: Unique identifier for the error.
  name: error.id
  type: keyword
- description: Error message.
  name: error.message
  type: match_only_text
- description: The type of the error, for example the class name of the exception.
  name: error.type
  type: keyword
- description: |-
    The action captured by the event.
    This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.
  name: event.action
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data is coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Name of the module this data is coming from.
    If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.
  name: event.module
  type: keyword
- description: |-
    Source of the event.
    Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).
  name: event.provider
  type: keyword
- description: |-
    This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  name: event.timezone
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Name of the host.
    It can contain what hostname returns on Unix systems, the fully qualified domain name (FQDN), or a name specified by the user. The recommended value is the lowercase FQDN of the host.
  name: host.name
  type: keyword
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: The time the process ended.
  name: process.end
  type: date
- description: |-
    The exit code of the process, if this is a termination event.
    The field should be absent if there is no exit code for the event (e.g. process start).
  name: process.exit_code
  type: long
- description: Process id.
  name: process.pid
  type: long
- description: |-
    Process name.
    Sometimes called program name or similar.
  multi_fields:
    - name: text
      type: match_only_text
  name: process.name
  type: keyword
- description: |-
    Deprecated for removal in next major version release. This field is superseded by `process.group_leader.pid`.
    Identifier of the group of processes the process belongs to.
  name: process.pgid
  type: long
- description: The time the process started.
  name: process.start
  type: date
- description: |-
    Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: server.address
  type: keyword
- description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
  name: server.as.number
  type: long
- description: Organization name.
  multi_fields:
    - name: text
      type: match_only_text
  name: server.as.organization.name
  type: keyword
- description: |-
    The domain name of the server system.
    This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.
  name: server.domain
  type: keyword
- description: City name.
  name: server.geo.city_name
  type: keyword
- description: Name of the continent.
  name: server.geo.continent_name
  type: keyword
- description: Country ISO code.
  name: server.geo.country_iso_code
  type: keyword
- description: Country name.
  name: server.geo.country_name
  type: keyword
- description: Longitude and latitude.
  name: server.geo.location.lat
  type: geo_point
- description: Longitude and latitude.
  name: server.geo.location.lon
  type: geo_point
- description: Region ISO code.
  name: server.geo.region_iso_code
  type: keyword
- description: Region name.
  name: server.geo.region_name
  type: keyword
- description: IP address of the server (IPv4 or IPv6).
  name: server.ip
  type: ip
- description: |-
    The highest registered server domain, stripped of the subdomain.
    For example, the registered domain for "foo.example.com" is "example.com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".
  name: server.registered_domain
  type: keyword
- description: |-
    The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.
    For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.
  name: server.subdomain
  type: keyword
- description: |-
    The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com".
    This value can be determined precisely with a list like the public suffix list (http://publicsuffix.org). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".
  name: server.top_level_domain
  type: keyword
- description: Port of the server.
  name: server.port
  type: long
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
- description: String indicating the cipher used during the current connection.
  name: tls.cipher
  type: keyword
- description: Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.
  name: tls.established
  type: boolean
- description: Numeric part of the version parsed from the original string.
  name: tls.version
  type: keyword
- description: Normalized lowercase protocol name parsed from original string.
  name: tls.version_protocol
  type: keyword
- description: Unique identifier of the user.
  name: user.id
  type: keyword
