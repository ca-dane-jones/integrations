---
description: 'Pipeline for processing smtpd events.'
processors:
  - grok:
      field: message
      patterns:
          - '(?<_tmp.smtpd_cxn_action>connect) from %{HOSTNAME:client.domain}\[%{IP:client.ip}\]$'
          - '(?<_tmp.smtpd_cxn_action>disconnect) from %{HOSTNAME:client.domain}\[%{IP:client.ip}\] ( |%{AUTH}|%{BDAT}|%{COMMANDS}|%{DATA}|%{EHLO}|%{ETRN}|%{EXPN}|%{HELO}|%{HELP}|%{NOOP}|%{QUIT}|%{RCPT}|%{RSET}|%{STARTTLS}|%{UNKNOWN}|%{VRFY})+'
          - '(?<_tmp.tls_connection>TLS connection established) from %{HOSTNAME:client.domain}\[%{IP:client.ip}\]: TLSv(?<tls.version>.+) with cipher %{WORD:tls.cipher} \(%{NUMBER}\/%{NUMBER} bits\) key-exchange (?<postfix.smtpd.connection.tls.key_exchange_algorithm>[\w]+) server-signature (?<postfix.smtpd.connection.tls.server.signature_algorithm>[\w-]+) \(%{POSINT:postfix.smtpd.connection.tls.server.signature_strength:long} bits\) server-digest %{WORD:postfix.smtpd.connection.tls.server.signature_digest}'
          - '%{LOSTCONN:postfix.smtpd.connection.lost.message}( after %{SMTP_STAGE:postfix.smtpd.connection.lost.stage}( \(%{INT} bytes\))?)? from %{HOSTNAME:client.domain}\[%{IP:client.ip}\](: %{GREEDYDATA:postfix.smtpd.connection.lost.reason})?'
          - 'improper command pipelining after %{SMTP_STAGE} from %{HOSTNAME:client.domain}\[%{IP:client.ip}\]: %{GREEDYDATA}'
          - '(?<email.local_id>[0-9A-F]+|NOQUEUE): client=%{HOSTNAME:client.domain}\[%{IP:client.ip}\]'
          - 'warning: %{HOSTNAME}: (?<error.code>RBL lookup error): %{GREEDYDATA:error.message}'
          - 'warning: (?<error.code>TLS library problem): %{GREEDYDATA:error.message}'
          - 'warning: hostname %{HOSTNAME:client.domain} does not resolve to address %{IP:client.ip}'
          - 'warning: non-SMTP command from %{HOSTNAME:client.domain}\[%{IP:client.ip}\]: %{GREEDYDATA}'
      pattern_definitions:
          # Command definitions
          AUTH: 'auth=(%{INT:postfix.smtpd.connection.commands.auth.total_count:long}|%{INT:postfix.smtpd.connection.commands.auth.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.auth.total_count:long})'
          BDAT: 'bdat=(%{INT:postfix.smtpd.connection.commands.bdat.total_count:long}|%{INT:postfix.smtpd.connection.commands.bdat.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.bdat.total_count:long})'
          COMMANDS: 'commands=(%{INT:postfix.smtpd.connection.commands.total_count:long}|%{INT:postfix.smtpd.connection.commands.total_accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.total_count:long})'
          DATA: 'data=(%{INT:postfix.smtpd.connection.commands.data.total_count:long}|%{INT:postfix.smtpd.connection.commands.data.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.data.total_count:long})'
          EHLO: 'ehlo=(%{INT:postfix.smtpd.connection.commands.ehlo.total_count:long}|%{INT:postfix.smtpd.connection.commands.ehlo.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.ehlo.total_count:long})'
          ETRN: 'etrn=(%{INT:postfix.smtpd.connection.commands.etrn.total_count:long}|%{INT:postfix.smtpd.connection.commands.etrn.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.etrn.total_count:long})'
          EXPN: 'expn=(%{INT:postfix.smtpd.connection.commands.expn.total_count:long}|%{INT:postfix.smtpd.connection.commands.expn.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.expn.total_count:long})'
          HELO: 'helo=(%{INT:postfix.smtpd.connection.commands.helo.total_count:long}|%{INT:postfix.smtpd.connection.commands.helo.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.helo.total_count:long})'
          HELP: 'rcpt=(%{INT:postfix.smtpd.connection.commands.help.total_count:long}|%{INT:postfix.smtpd.connection.commands.help.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.help.total_count:long})'
          NOOP: 'noop=(%{INT:postfix.smtpd.connection.commands.noop.total_count:long}|%{INT:postfix.smtpd.connection.commands.noop.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.noop.total_count:long})'
          QUIT: 'quit=(%{INT:postfix.smtpd.connection.commands.quit.total_count:long}|%{INT:postfix.smtpd.connection.commands.quit.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.quit.total_count:long})'          
          RCPT: 'rcpt=(%{INT:postfix.smtpd.connection.commands.rcpt.total_count:long}|%{INT:postfix.smtpd.connection.commands.rcpt.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.rcpt.total_count:long})'
          RSET: 'rset=(%{INT:postfix.smtpd.connection.commands.rset.total_count:long}|%{INT:postfix.smtpd.connection.commands.rset.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.rset.total_count:long})'
          STARTTLS: 'starttls=(%{INT:postfix.smtpd.connection.commands.starttls.total_count:long}|%{INT:postfix.smtpd.connection.commands.starttls.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.starttls.total_count:long})'
          UNKNOWN: 'unknown=(%{INT:postfix.smtpd.connection.commands.unknown.total_count:long}|%{INT:postfix.smtpd.connection.commands.unknown.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.unknown.total_count:long})'
          VRFY: 'vrfy=(%{INT:postfix.smtpd.connection.commands.vrfy.total_count:long}|%{INT:postfix.smtpd.connection.commands.vrfy.accepted_count:long}\/%{INT:postfix.smtpd.connection.commands.vrfy.total_count:long})'
          # General patterns
          SMTP_STAGE: '(CONNECT|HELO|EHLO|STARTTLS|AUTH|MAIL( FROM)?|RCPT( TO)?|(end of )?DATA|BDAT|RSET|UNKNOWN|END-OF-MESSAGE|VRFY|\.)'
          # Lost connection patterns
          LOSTCONN: '(Connection timed out|No route to host|Connection refused|Network is unreachable|lost connection|timeout|SSL_accept error|-1)'
          LOSTCONN_REASONS: '(receiving the initial server greeting|sending message body|sending end of data -- message may be sent more than once)'
      description: 'Extracts smtpd event fields.'
  - grok:
      field: error.message
      patterns:
        - '%{DATA} name=%{HOSTNAME:dns.question.name} type=%{WORD:dns.question.type}: %{GREEDYDATA}'
      description: |
        Extract dns.question fields from RBL lookup errors
      if: ctx.error?.code == 'RBL lookup error'
  - set:
      description: Set tls.established to true for successful TLS connections
      field: tls.established
      override: false
      ignore_empty_value: false
      value: true
      if: 'ctx._tmp?.tls_connection != null'
  - set:
      description: Set tls.version_protocol to tls for successful TLS connections
      field: tls.version_protocol
      override: false
      ignore_empty_value: false
      value: 'tls'
      if: 'ctx.tls?.version != null'
  - set:
      description: If this is an smtpd connect or disconnect event, set postfix.smtpd.connection.action value
      field: postfix.smtpd.connection.action
      override: false
      ignore_empty_value: false
      value: "{{{_tmp.smtpd_cxn_action}}}"
      if: 'ctx._tmp?.smtpd_cxn_action != null'
  - set:
      description: If this is an RBL error message and a DNS query was captured, set the dns.type
      field: dns.type
      override: false
      ignore_empty_value: false
      value: question
      if: 'ctx.dns?.question?.name != null'
  - script:
      source: |
        def cmds = ctx.postfix.smtpd.connection.commands;
        def cmdKeys = params.cmdKeys;
        for (key in cmds.keySet()) {
            if (cmdKeys.contains(key)) {
                long rejected = 0;
                long accepted = 0;
                long total_count = 0;
                if (cmds[key].containsKey('total_count')) {
                    total_count = cmds[key].total_count;
                }
                if (cmds[key].containsKey('accepted_count')) {
                    accepted = cmds[key].accepted_count;
                } else {
                    accepted = total_count
                }
                if (cmds[key].containsKey('rejected_count')) {
                    rejected = cmds[key].rejected_count;
                }
                cmds[key].total_count = total_count;
                cmds[key].accepted_count = accepted;
                cmds[key].rejected_count = total_count - accepted;
            }
        }
        if (cmds.containsKey('total_count') && cmds.containsKey('total_accepted_count')) {
            cmds.total_rejected_count = cmds.total_count - cmds.total_accepted_count;
        }
        ctx.postfix.smtpd.connection.commands = cmds;
      params:
          cmdKeys:
            - auth
            - bdat
            - data
            - ehlo
            - etrn
            - expn
            - helo
            - help
            - noop
            - quit
            - rcpt
            - rset
            - starttls
            - unknown
            - vrfy
      if: "ctx.tags.contains('calculate_connection_metrics') && ctx.postfix?.smtpd?.connection?.commands != null"
      description: 'Calculate connection command metrics'
